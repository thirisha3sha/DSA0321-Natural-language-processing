#22.	Create a python program that performs reference resolution within a text.
import nltk
from nltk import pos_tag, word_tokenize

nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')

def resolve_references(text):
    tokens = word_tokenize(text)
    pos_tags = pos_tag(tokens)
    antecedents = {}
    resolved = []

    for word, pos in pos_tags:
        if pos in ['NN', 'NNP']:
            antecedents[word] = word
        elif pos == 'PRP':
            resolved.append((word, antecedents.get(word, "unknown")))

    return resolved

text = "John loves his dog. He takes it for walks."
resolved_references = resolve_references(text)

for pronoun, antecedent in resolved_references:
    print(f"{pronoun} ->{antecedent}")
#output:
He ->unknown
it ->unknown
[nltk_data] Downloading package punkt to /root/nltk_data...
[nltk_data]   Package punkt is already up-to-date!
[nltk_data] Downloading package averaged_perceptron_tagger to
[nltk_data]     /root/nltk_data...
[nltk_data]   Package averaged_perceptron_tagger is already up-to-
[nltk_data]       date!
